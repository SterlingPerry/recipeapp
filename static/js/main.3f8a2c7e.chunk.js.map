{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","props","react_default","a","createElement","className","title","DirectoryView","src_SearchForm","searchVal","handleChange","selectRecipes","recipes","map","recipe","src_RecipeCard","name","id","clickHandler","key","SearchForm","value","onChange","placeholder","onClick","RecipeCard","DetailView","details","ingredients","instructions","App","state","selectedRecipes","recipeDetail","event","_this","setState","target","e","preventDefault","recipesFilter","filter","receipe","includes","selectRecipeName","console","log","find","src_Header","src_DirectoryView","this","src_DetailView","React","Component","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f8a2c7e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nconst Header = (props) => (\n    <h1 className=\"header\">{props.title}</h1>\n);\n\nconst DirectoryView = (props) => (\n    <div className=\"directory-view\">\n        <SearchForm searchVal={props.searchVal} handleChange={props.handleChange} selectRecipes={props.selectRecipes} />\n        {props.recipes.map(recipe => <RecipeCard name={recipe.name} id={recipe.id} clickHandler={props.clickHandler} key={recipe.id} />)}\n    </div>\n);\n\nconst SearchForm = (props) => (\n    <form className=\"form\">\n        <input className=\"input\" value={props.searchVal} onChange={props.handleChange} placeholder=\"Search Recipes Here\"/>\n        <button className=\"button\" onClick={props.selectRecipes}>SEARCH</button>\n    </form>\n);\n\nconst RecipeCard = (props) => (\n    <div  className=\"recipecard\" onClick={() => props.clickHandler(props.id)}>\n        <p>{props.name}</p>\n    </div>\n);\n\nconst DetailView = (props) => (\n    <div className=\"detail-view\">\n        <p><strong>Name:</strong> {props.details.name}</p>\n        <p><strong>Ingredients:</strong> {props.details.ingredients}</p>\n        <p><strong>Instructions:</strong> {props.details.instructions}</p>\n    </div>\n);\n\nclass App extends React.Component {\n    state = {\n        recipes: [\n            {\n                id: 1,\n                name: 'The Scramble',\n                ingredients: ['eggs, ', 'hash browns, ', 'sausage, ', 'cheese, ', 'onion'],\n                instructions: ['make scrambled eggs, ', 'cook hash browns, ', 'brown sausage, ', 'mix it all up and add cheese']\n            },\n            {\n                id: 2,\n                name: 'Spanakopita',\n                ingredients: ['Olive oil', 'Onion', 'Garlic', 'Spinach'],\n                instructions: ['Put the stuff in a bowl', 'Cook the stuff']\n            },\n            {\n                id: 3,\n                name: 'Vasilopita',\n                ingredients: ['Flower', 'Baking Soda', 'Butter', 'Sugar', 'Eggs'],\n                instructions: ['Throw everything in the air and hope it comes together', 'Knead the bread', 'Show the bread some love', 'Bake it at 400 degrees']\n            },\n            {\n                id: 4,\n                name: 'Mac and Cheese',\n                ingredients: ['Mac', 'Cheese'],\n                instructions: ['Put the mac in the cheese', 'Swish it around', 'Bake for 15 minutes at 350 degrees']\n            }\n        ],\n        searchVal: '',\n        selectedRecipes: [],\n        recipeDetail: {}\n    }\n\n  \n\n    handleChange = (event) => {\n        this.setState({ searchVal: event.target.value });\n    };\n\n    selectRecipes = (e) => {\n        e.preventDefault();\n        const recipesFilter = this.state.recipes.filter(receipe => receipe.name.includes(this.state.searchVal));\n        this.setState({ selectedRecipes: recipesFilter });\n    }\n\n    selectRecipeName = (id) => {\n        console.log(id);\n        this.setState({ recipeDetail : this.state.recipes.find(recipe => recipe.id === id)})\n    }\n    render() {\n        return (\n            <div>\n                <Header title=\"Recipe App\" />\n                <DirectoryView\n                    recipes={this.state.selectedRecipes}\n                    searchVal={this.state.searchVal}\n                    handleChange={this.handleChange}\n                    selectRecipes={this.selectRecipes}\n                    clickHandler={this.selectRecipeName}\n                />\n                <DetailView\n                    details={this.state.recipeDetail}\n                />\n            </div>\n        );\n    };\n\n\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}